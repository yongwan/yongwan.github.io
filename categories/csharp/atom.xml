<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: csharp | /* LIFE RUNS ON CODE */]]></title>
  <link href="/categories/csharp/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2013-08-23T17:11:11+09:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[{"name"=>"YongWan Jo", "email"=>"yongwan.jo@wany.kr", "github"=>"yongwan", "twitter"=>"yongwany", "facebook"=>"yongwan.jo"}]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

	
	
	<entry>
		<title type="html"><![CDATA[Design Guidelines for Exceptions]]></title>
		<link href="/2013/05/24/Design-Guidelines-for-Exceptions"/>
		<updated>2013-05-24T00:00:00+09:00</updated>
		<id>/2013/05/24/Design-Guidelines-for-Exceptions</id>
		<content type="html"><![CDATA[<p>ASP.NET MVC에서 Exception 처리와 표현에 대해서 토의가 있었지만 현재까지는 결론없이 끝났다.
결국은 UK의 결정에 따라 가겠지만 일단 우리 내부적으로 어떻게 해야할 지 그리고 그 근거는 어디에 있는지 이야기할 필요가 있다고 생각되는 한 편. 기본을 제대로 이해하지 못하고 무턱대고 삽질하는 것보다 기본을 먼저 아는 것이 필요하겠다 싶어서 예전에 봤었지만 다시한 번 정독.</p>

<p>제일 필요한 부분이 <a href="http://msdn.microsoft.com/en-us/library/ms229007(v=vs.100).aspx">Catching and Throwing Standard Exception Types</a>. <a href="http://msdn.microsoft.com/ko-kr/library/ms229007(v=vs.100).aspx">한글도 지원</a>을 해주지만 번역이 이해하는 게 더 어렵다;; 내가 번역하려고 하면 더더욱 어렵다;;;</p>

<h4 id="exeption-systemexception">Exeption, SystemException</h4>
<ul>
  <li>Eception 또는 SystemException을 던지지 마라.</li>
  <li>re-throw를 의도한 것이 아니라면 Exception, SystemException을 Catch하지 마라. ( Log를 쓰거나 할 경우? )</li>
  <li>top-level exception handler(Exception의 마지막 layer, MVC의 경우 Controller)가 아니라면 Exception 또는 SystemException을 Catch하지 마라.</li>
</ul>

<h4 id="applicationexception">ApplicationException</h4>
<ul>
  <li>ApplicationException 말고 Exception을 상속 받아라.</li>
</ul>

<h4 id="invalidoperationexception">InvalidOperationException</h4>
<ul>
  <li>property의 setter또는 method를 부를 때 객체의 상태가 행동을 하는데 적합하지 않다면 InvalidOperatonException을 사용하여 던져라.</li>
</ul>

<h4 id="argumentexception-argumentnullexception-and-argumentoutofrangeexception">ArgumentException, ArgumentNullException and ArgumentOutOfRangeException</h4>
<ul>
  <li>Argument가 적절하지 않는 녀석이 왔다면 ArgumentException 또는 그 것을 상속받은 Exception을 던져라. 가능하면 가장 하위의 Exception을 사용.</li>
  <li>ParamName property에 값을 넣어라.</li>
  <li>Property의 setter에서는 ParamName으로 “value”를 사용해라.
<table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><code class="csharp">1
2
3
4
5
6
7
8</code></pre></div></td><td class="code"><div class="highlight"><pre><span class="k">set</span>
<span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="k">value</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
  <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="err">“</span><span class="k">value</span><span class="err">”</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">address</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></li>
  <li>public API에서 NullReferenceException, AccessViolationException, InvalidCastException 또는 IndexOutOfRangeException을 명시적 또는 암시적으로 던지지 못하게 하라. 이러한 Exception들을 던지는 것을 피하기 위해서 Argument들을 check하라.</li>
</ul>

<h4 id="stackoverflowexception-outofmemoryexception-comexception-sehexception-and-executionengineexception">StackOverflowException, OutOfMemoryException, ComException, SEHException and ExecutionEngineException.</h4>
<ul>
  <li>위 Exception들은 CRL을 통해서만 던지게 되어 있으니까 명시적으로 던지지마라. </li>
  <li>StackOverflowException과 SEHException은 명시적으로 Catch하지 마라.</li>
</ul>

<p><del>포스팅이 조잡하군.</del></p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[Dispose, garbage collection and finalization]]></title>
		<link href="/2012/10/26/dispose-garbage-collection-and-finalization"/>
		<updated>2012-10-26T00:00:00+09:00</updated>
		<id>/2012/10/26/dispose-garbage-collection-and-finalization</id>
		<content type="html"><![CDATA[<p>객체의 생성 및 소멸과 관련해서 수정을 해야할 일이 있어서 공부를 좀 해야겠다 싶어 검색을 하다가 찾은 괜찮은 <a href="http://stackoverflow.com/questions/574019/calling-null-on-a-class-vs-dispose">포스팅</a>. 이라기 보단 답변.</p>

<p>내 수준으로 굳이 번역을 하자면</p>

<p>결론 : <strong>Disposal과 Garbage Collection은 전혀 별개의 문제</strong>이다.</p>

<ul>
  <li>
    <p><strong>using Statement</strong>는 단순히 문법적으로 try/finally 문장을 쉽게 표현한 녀석.
  using안에서 Dispose() 부르던 안부르던 Exception이 떨어지던 안 떨이지던 Dispose()를 항상 부르게 만들어 놓은 녀석.
  그래서 using문 안에 들어가는 객체는 IDisposable이 Implementation되어 있어야 한다.</p>
  </li>
  <li>
    <p><strong>Disposal</strong>은 unmanaged resources(non-memory resources)에 대한 녀석이다.
  UI, 네트워크 접속, 파일 등과 제어되지 않는 제한된 Resource에 대한 핸들링을 위해서 Implementation된다.</p>
  </li>
  <li>
    <p><strong>Garbage Collection</strong>은 단지 Memory에 대한 핸들링이다.
  Garbage Collector는 더 이상 참조되지 않는 객체를 찾아서 Release해주는 역할을 하지만 항상 돌아가는 건 아니다.</p>
  </li>
  <li>
    <p><strong>Finalizer</strong>는 개발자가 Dispose를 명시적으로 해주여야 하는 데 이를 지키지 않았을 때를 대비해서 Unmanaged Resources를 Release하기 위해 작성한다.
  하지만 적상적인 패턴으로 개발을 한 경우라면 Finalizer는 실행되지 않을 것이다.</p>
  </li>
  <li>
    <p><strong>Setting a variable to null</strong>은	Garbage Collection으로 인해서 null로 asign하는 것은 의미가 없다.
  지역변수에서는 JIT(?)가 충분히 똘똘하기 때문에 variable을 추후에 사용할지 안 할지에 대해서 판단할 수 있다.
  멤버변수(전역변수)일 때도 거의 필요없기는 하지만 null로 세팅하는 것이 필요할 때도 있다.</p>
  </li>
</ul>

<p>대부분의 경우 Finalizer의 Implementation은 필요가 없다.</p>

<p>추가 참고 : Connection은 가장 늦게 Open해서 가장 빨리 Close해라. 제한된 Resource이기 때문에.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[[LINQ] 프로퍼티를 이용한 중복 제거 ( Distinct by property )]]></title>
		<link href="/2012/07/16/linq-distinct-by-property"/>
		<updated>2012-07-16T00:00:00+09:00</updated>
		<id>/2012/07/16/linq-distinct-by-property</id>
		<content type="html"><![CDATA[<p>특정 프로퍼티(property)를 대상으로 중복을 제거해야 하는 데 어떻게 하면 LINQ를 이용해서 할 수 있을까.
나름 생각한 것이 프로퍼티만 뽑아서 중복제거 후에 원래의 List와 Join을 하는 방법이었는데 이게 안 먹더라.
( 아직도 왜 안먹는지 이유를 모르겠다. ㅡㅡ; )
역시 안될 때는 Googling~</p>

<p>그래서 찾아낸 것이 <a href="http://stackoverflow.com/questions/489258/linq-distinct-on-a-particular-property">Linq Distinct on a particular Property</a>.
아래 세가지 방법 중 하나를 선택해서 해결할 수 있다.</p>

<ul>
  <li>Extention method를 사용</li>
  <li>Group By를 사용</li>
  <li>Where / Any 를 복합 사용</li>
</ul>

<p>나는 Group By를 이용해서 해결!!</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[C# - var 키워드의 사용]]></title>
		<link href="/2012/06/12/using-var-in-csharp"/>
		<updated>2012-06-12T00:00:00+09:00</updated>
		<id>/2012/06/12/using-var-in-csharp</id>
		<content type="html"><![CDATA[<p>UK와 code review를 서로 하고 있는데 UK의 Comment에서 var keyword를 사용하지 말라는 언급이 있어서 Googling. 과연? 왜? 어떤 경우에?</p>

<p>일단 MSDN : <a href="http://msdn.microsoft.com/ko-kr/library/bb384061.aspx">암시적으로 형식화된 지역 변수(Implicitly Typed Local Variables)</a></p>

<p>위 페이지의 마지막에 보면 아래와 같은 언급이 있다.</p>

<pre><code>그러나 var을 사용하면 다른 개발자가 코드를 이해하는 것이 더 어려워질 수 있습니다. 이런 이유로 C# 문서에서는 일반적으로 필요한 경우에만 var을 사용합니다.

However, the use of var does have at least the potential to make your code more difficult to understand for other developers. For that reason, the C# documentation generally uses var only when it is required.
</code></pre>

<p>머 결국은 <strong>누군가와 함께 개발을 한다면 필요한 경우에만 var를 사용</strong>하는 것이 좋을 거라는 이야기.</p>

<p>조금 더 괜찮은 포스팅이 있어서 소개<em>(라고는 하지만 Jeff Atwood를 까는 느낌이 많음.ㅋ)</em></p>

<p><a href="http://richarddingwall.name/">C# 3.0′s var keyword: Jeff Atwood gets it all wrong</a><br />
<strong>[Updated : 2013-08-23]</strong><br />
<em>링크 깨져서 블로그에 들어가보니 포스팅이 지워졌다;; 그래서 그냥 블로그로 링크 대체</em></p>

<p>위 링크의 내용 중에 MSDN의 var page에 가면 과도한 var의 사용은 어쩌고 저쩌고 하는 내용이 있는데 실제로 링크에 가면 없다.
링크의 링크에는 혹시 있을지 모르지만. 근데 그 내용은 어쩐지 믿음직하다.</p>

<p>댓글들도 다양한데 인상깊은 댓글이 있다면 </p>

<pre><code>너처럼 다른 사람을 까서 유명해지려고 하는 사람의 글은 싫다. 다른 사람의 언급없이 니 의견만 말했었어야 했다.
</code></pre>

<p>UK는 아무래도 Anonymous Type이 아니면 var를 사용하지 않았으면 하는 것 같다.
나도 동의는 하지만 명시적으로 new를 이용한 object 생성이 있다면 그 때는 var을 사용해도 무방하다고 본다.
다형성이 문제가 되는 코드라고 한다면 물론 명시적으로 작성해주는 것이 맞다고 생각하고.</p>

<p>결국은 팀에 통일된 룰이 있고 그 룰을 팀원들이 이해하고 있다면 그 걸이 정답이 아닐까 생각한다.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[LINQ와 생산성]]></title>
		<link href="/2012/05/31/linq-and-productivity"/>
		<updated>2012-05-31T00:00:00+09:00</updated>
		<id>/2012/05/31/linq-and-productivity</id>
		<content type="html"><![CDATA[<p>LINQ와 관련해서 괜찮은 포스팅이 MSDN에 있어서 오랜만에 끄적거려 봄.</p>

<p>저자는 아직 많은 개발자들이 LINQ에 적응하지 못하고 있다고 하는데 이것은 LINQ를 제대로 이해하지 못하고 있기 때문이라고.</p>

<p><strong><a href="http://msdn.microsoft.com/en-us/vstudio/hh749018">LINQ and Productivity</a> 본문 中</strong></p>

<pre><code>Anders가 자주 말하는 게 C#에 추가된 LINQ와 다른 기능들은 개발의 '어떻게 보다는 무엇에' 집중하는 것을 쉽게 해준다.
Anders has often said that LINQ and the other functional concepts added to C# make it easier to ‘concentrate on the what instead of the how’ of programming.
</code></pre>

]]></content>
	</entry>
	
	
</feed>