<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | /* LIFE RUNS ON CODE */]]></title>
  <link href="/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2013-08-23T17:11:11+09:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[{"name"=>"YongWan Jo", "email"=>"yongwan.jo@wany.kr", "github"=>"yongwan", "twitter"=>"yongwany", "facebook"=>"yongwan.jo"}]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

	
	
	<entry>
		<title type="html"><![CDATA[ASP.NET MVC + jQuery AJAX 에서의 Error Handling]]></title>
		<link href="/2013/05/29/error-handling-on-jquery-ajax-on-asp-dot-net-mvc"/>
		<updated>2013-05-29T00:00:00+09:00</updated>
		<id>/2013/05/29/error-handling-on-jquery-ajax-on-asp-dot-net-mvc</id>
		<content type="html"><![CDATA[<p>자. 우리 팀에서 결론 없이 무한루프를 돌고 있는 이야기를 시작해야겠다.
안타깝게도 결론은 UK팀에서 내겠지만.</p>

<ul>
  <li>
    <p>Error 처리의 경우 UX 관점에서 어떤 경우 어떻게 보여줄 것인가에 대한 것이 우선 정의되어 있어야 개발자가 그 경우에 따라 개발이 가능하겠다.</p>
  </li>
  <li>우리 제품은 4가지의 방법으로 표현이 가능하도록 되어 있는데 UX 측면에서만 보자면
    <ul>
      <li>CRUD중 R을 제외한 경우 실행하기 전 Domain Model에서 자체 Validation을 제공하고 있고 이 결과(Validation Results)를 ASP.NET MVC의 ModelSatate에 넣어서 ValidationSummary()를 이용해서 보여준다.</li>
      <li>CRUD중 R의 경우 값은 정상적이지만(즉, 그 View를 표현할 수 있는 충분한 Data를 읽어왔지만) Data의 Status에 따른 warning을 보여주어야 할 경우 ViewModel에 Message property를 추가 및 사용하여 View에 Icon과 함께 이쁘게 보여준다.</li>
      <li>Exception의 생겼을 경우. 즉, CRUD에서 개발자가 생각하지 못했던 Exception(e.g. user가 정상적인 process를 거치지 않고 db를 업데이트하여 data가 정상적이지 않을 때 또는 Defect)이 발생하게 되면 ASP.NET MVC의 HandleErrorAttribute + Error.aspx Page를 이용해서 보여준다.</li>
      <li>jQuery AJAX를 이용한 Exception의 출력은 jQuery Dialog를 이용해서 pop-up의 형태로 보여준다.</li>
    </ul>
  </li>
  <li>
    <p>일반적인 경우는 위의 마지막을 제외한 방법으로 해결이 가능하지만, 앞으로 Exception을 jQuery Dialog를 가지고 pop-up으로 보여주는 것은 사용하지 않기로 했다. UK의 결정.</p>
  </li>
  <li>
    <p>AJAX의 CRUD(GET, POST)의 경우 모두 위의 첫번째, 두번째 방법으로 해결이 되지만 Exception은 어떻게 해결해야할지가 관건이 된다. 세 번째 방법으로 Error를 보여줄 경우 그 Page안에 Main Page로 가는 링크가 보여지고 AJAX의 정상적인 결과는 Partial View인데 Exception은 전체 PAGE가 되는 상황이 발생하기 때문이다.</p>
  </li>
  <li>
    <p>이 걸 해결하는 방법은 생각외로 간단하다. Error View로 사용할 Partial View ( e.g. MyError.ascx )를 만들어서 Partial View의 Action에 [HandleError]를 사용하면 된다.</p>
  </li>
  <li>
    <p>이제 조금 더 깊게 들어가서. AJAX로 파일을 업로드하기 위해서 쓰는 <a href="http://jquery.malsup.com/form/">jQuery Form Plugin</a>이 있다. 이 플러그인만 그런지 모르겠지만 이 녀석은 c#에서 error를 throw하더라도 error handler로 가지 않고 success handler로 가게끔 되어 있다.</p>
  </li>
  <li>
    <p>원인은 Plugin이 response code를 어떤 경우에도 조작하지 않기 때문이라고. 아직 레벨이 낮아서 Plugin Source를 봐도 잘 이해하지는 못하겠다. 여튼 이런 경우에 Response Status를 200이 아닌 다른 녀석으로 Return하거나 특정 상태를 return해서 success에서 handling하는 방법이 있다고 한다.</p>
  </li>
  <li>Googling해서 찾은 가장 괜찮은 LINK는 요기 : “<a href="http://stackoverflow.com/questions/3995355/jquery-form-plugin-no-error-handling">jquery form plugin, no error handling</a>”</li>
</ul>
]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[ASP .NET MVC에서 HttpContext를 이용한 Cookie Test]]></title>
		<link href="/2013/04/30/cookie-test-on-asp-dot-net-mvc"/>
		<updated>2013-04-30T00:00:00+09:00</updated>
		<id>/2013/04/30/cookie-test-on-asp-dot-net-mvc</id>
		<content type="html"><![CDATA[<p>Controller에서 내부에서 Cookie 값을 읽고 써야하는 부분이 필요하게 되었는데,
기존의 코드가 System.Web.HttpContext.Current를 사용하여 Cookie값을 읽어오고 있었다.
그냥 생각없이 긁어 쓰고 나서 Test Project를 만들려고 하니 머시 방법이 없다.
그래서 구글링 ㄱㄱ. </p>

<p><a href="http://stackoverflow.com/questions/785413/difference-between-httpcontext-current-and-controller-context-in-mvc-asp-net">Difference between HttpContext.Current and Controller.Context in MVC ASP.NET</a></p>

<p>첫번째 답변은 Thread를 따로 만들어 사용하면 Current의 HttpContext와 Controller의 HttpContext는 다를 수가 있다. 하지만 나의 경우는 Thread를 고려할 필요가 없어서 Pass.
두번째 답변을 보면 <strong>HttpContext의 Mocking을 위해서라면 Controller의 HttpContext를 사용</strong>할 것을 이야기 하고 있다.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[View에서 Controller와 Action 이름 가져오는 방법]]></title>
		<link href="/2012/07/16/getting-name-of-action-and-controller"/>
		<updated>2012-07-16T00:00:00+09:00</updated>
		<id>/2012/07/16/getting-name-of-action-and-controller</id>
		<content type="html"><![CDATA[<p>Partial View에서 Action 이름을 가지고 UI를 그리는 로직을 만들어야 하는데.
<code>this.Request.Path</code>는 왠지 나이스하지 않은 방법인 거 같아서 구글링.</p>

<p><a href="http://stackoverflow.com/questions/1083774/getting-the-name-of-the-controller-and-action-method-in-the-view-in-asp-net-mvc">Getting the name of the controller and action method in the view in ASP.Net MVC</a></p>

<p><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><code class="csharp">1
2</code></pre></div></td><td class="code"><div class="highlight"><pre><span class="p">&amp;</span><span class="n">lt</span><span class="p">;%=</span> <span class="n">ViewContext</span><span class="p">.</span><span class="n">RouteData</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="err">“</span><span class="n">Controller</span><span class="err">”</span><span class="p">]</span> <span class="p">%&amp;</span><span class="n">gt</span><span class="p">;</span>
<span class="p">&amp;</span><span class="n">lt</span><span class="p">;%=</span> <span class="n">ViewContext</span><span class="p">.</span><span class="n">RouteData</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="err">“</span><span class="n">Action</span><span class="err">”</span><span class="p">]</span> <span class="p">%&amp;</span><span class="n">gt</span><span class="p">;</span>
</pre></div>
</td></tr></table></p>

<p>역시나 이렇게 나이스한 방법이 있었다.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[ASP .NET MVC 프로세스]]></title>
		<link href="/2012/06/28/asp-dot-net-mvc-process"/>
		<updated>2012-06-28T00:00:00+09:00</updated>
		<id>/2012/06/28/asp-dot-net-mvc-process</id>
		<content type="html"><![CDATA[<p>소스에 DefaultControllerFactory를 상속 받아서 이 것, 저 것 로직은 넣는 부분 있어서 그걸 찾아보다가 우선 <strong>MVC의 프로세스부터 명확하게 이해</strong>를 하고 넘어가는 것이 좋을 것 같아 정리.
가장 좋은 Reference는 역시 MSDN</p>

<p><a href="http://msdn.microsoft.com/ko-kr/library/dd381612(v=vs.100).aspx">MVC 응용 프로그램 실행 프로세스 이해(Understanding the MVC Application Execution Process)</a></p>

<p><img src="/assets/attachments/2012-06-28-asp-dot-net-mvc-process/mvc_process.png" alt="MVC 웹 프로젝트의 실행 단계" /></p>

<p>우리 코드의 경우 저기 ‘컨트롤러 만들기’ 부분에서 DefaultControllerFactory를 상속받아 첫페이지에서 필요한 Process들(LogOn, Licensing 등)을 살짝 끼워넣어 필터링 하고 있다.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[Cross-Site Request Forgery(CSRF) in ASP.NET MVC]]></title>
		<link href="/2012/05/22/csrf-in-asp-dot-net-mvc"/>
		<updated>2012-05-22T00:00:00+09:00</updated>
		<id>/2012/05/22/csrf-in-asp-dot-net-mvc</id>
		<content type="html"><![CDATA[<p>한국어로는 <a href="http://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0">사이트 간 요청 위조</a>.
정상적으로 생성된 쿠키를 이용해서 특정 사이트를 공격하는 방법.
이 때문에 Request를 하는 User를 확인하는 과정이 필요한데 ASP.NET MVC에서 이를 확인하는 API가 존재.</p>

<p>그거슨 AntiForgeryTokenHelper. 아래 사이트에 자세하게 잘 나와있다.</p>

<p><a href="http://blog.stevensanderson.com/2008/09/01/prevent-cross-site-request-forgery-csrf-using-aspnet-mvcs-antiforgerytoken-helper/">Prevent Cross-Site Request Forgery (CSRF) using ASP.NET MVC’s AntiForgeryToken() helper</a></p>

<p>간단하게 말하면 aspx의 <strong>form에는 <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.htmlhelper.antiforgerytoken(v=vs.108).aspx">Html.AntiForgeryToken()</a></strong>을 사용하고
<div class="highlight"><pre><code class="csharp"><span class="p">&amp;</span><span class="n">lt</span><span class="p">;%</span> <span class="n">using</span><span class="p">(</span><span class="n">Html</span><span class="p">.</span><span class="n">Form</span><span class="p">(</span><span class="err">“</span><span class="n">Item</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Submit</span><span class="err">”</span><span class="p">))</span> <span class="p">{</span> <span class="p">%&amp;</span><span class="n">gt</span><span class="p">;</span>
    <span class="p">&amp;</span><span class="n">lt</span><span class="p">;%=</span> <span class="n">Html</span><span class="p">.</span><span class="n">AntiForgeryToken</span><span class="p">()</span> <span class="p">%&amp;</span><span class="n">gt</span><span class="p">;</span>
    <span class="p">&lt;!--</span> <span class="n">etc</span> <span class="p">--&gt;</span>
<span class="p">&amp;</span><span class="n">lt</span><span class="p">;%</span> <span class="p">}</span> <span class="p">%&amp;</span><span class="n">gt</span><span class="p">;</span>
</code></pre></div></p>

<p>Controller의 해당 <strong>POST action에는 <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.validateantiforgerytokenattribute(v=vs.108).aspx">ValidateAntiForgeryTokenAttribute</a></strong>를 사용하면 된다.
<div class="highlight"><pre><code class="csharp"><span class="na">[HttpPost]</span>
<span class="na">[ValidateAntiForgeryToken]</span>
<span class="k">public</span> <span class="n">ViewResult</span> <span class="nf">Submit</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// etc</span>
<span class="p">}</span>
</code></pre></div></p>

<p>이렇게 공격하겠다고 생각한 해커도 대단한 듯;;</p>

<p>참고 : <a href="http://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85">Cross-Site Scripting(XSS)</a></p>

]]></content>
	</entry>
	
	
</feed>