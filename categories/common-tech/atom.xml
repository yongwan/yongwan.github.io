<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: common tech | /* LIFE RUNS ON CODE */]]></title>
  <link href="/categories/common-tech/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2013-08-23T17:11:11+09:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[{"name"=>"YongWan Jo", "email"=>"yongwan.jo@wany.kr", "github"=>"yongwan", "twitter"=>"yongwany", "facebook"=>"yongwan.jo"}]]></name>
    
  </author>
  <generator uri="https://github.com/recurser/jekyll-plugins">Recurser</generator>

	
	
	<entry>
		<title type="html"><![CDATA[.bind(), .live(), .delegate() and on()]]></title>
		<link href="/2013/05/02/jQuery-bind-live-delegate-on"/>
		<updated>2013-05-02T00:00:00+09:00</updated>
		<id>/2013/05/02/jQuery-bind-live-delegate-on</id>
		<content type="html"><![CDATA[<p>개발하고 있는 source에서 <code>.click()</code>이랑 <code>.live('click', ...)</code>을 섞어서 사용하고 있더라.
갑자기 문득 어떤 방법이 더 좋은 방법인가 하고 찾아보다가 괜찮은 블로깅을 발견! +_+</p>

<p><a href="http://www.elijahmanor.com/2012/02/differences-between-jquery-bind-vs-live.html">Differences Between jQuery .bind() vs .live() vs .delegate() vs .on()</a></p>

<p>자. 그럼. Let’s start foot translation.
### Bind
<code>.click()</code>은 <code>.bind('click', ...)</code>을 단순화한 방법이다.</p>

<h4 id="section">장점</h4>
<ul>
  <li>다양한 브라우저에서 동작한다.  </li>
  <li>쉽고 빠르게 사용할 수 있다.</li>
  <li><code>.click()</code>, <code>.hover()</code> 등과 동작을 하면서 더 쉽게 등록할 수 있다.</li>
  <li>id selector에 대해서 빠르게 event를 등록할 뿐만 아니라 event가 전달 되었을 때 거의 즉시 동작한다.</li>
</ul>

<h4 id="section-1">단점</h4>
<ul>
  <li>bind()가 selector와 일치하는 모든 element에 같은 event handler를 붙인다.</li>
  <li>같은 selector에 대해서 <strong>동적으로 생성된 element에는 동작하지 않는다.</strong></li>
  <li>많은 선택을 처리할 때 성능에 문제가 있을 수 있다.</li>
  <li>Page load시 성능문제를 야기할 수 있는 첨부가 먼저 실행된다.</li>
</ul>

<h3 id="live">Live</h3>
<p><code>.live()</code>는 document의 root에 selector, event 정보와 함께 event handler를 붙인다. 이렇게 함으로서 bubbled(delegated, propagated)된 모든 이벤트에 대해서 하나의 event handler가 동작한다.</p>

<h4 id="section-2">장점</h4>
<ul>
  <li><code>.bind()</code>에 처럼 event handler가 여러 번 등록되지 않고 <strong>한번만 등록</strong>된다.</li>
  <li><code>.bind()</code>에서 <code>.live()</code>로의 변경이 용이하다. 그냥 ‘bind’를 ‘live’로 고치면 된다.</li>
  <li>정보가 document에 등록되어 있기 때문에 <strong>동적으로 생성된 elements에 대해서도 동작</strong>한다.</li>
  <li>document ready event 이 전에 이벤트를 등록할 수 있어서 사용하지 않는 시간에 대한 활용을 가능하도록 도와준다.</li>
</ul>

<h4 id="section-3">단점</h4>
<ul>
  <li><strong>jQuery 1.7 이 후부터는 폐기</strong>되었기 때문에 단계적으로 code에서 제거하여야 한다.</li>
  <li>Chaining을 정상적으로 지원하지 않는다.</li>
  <li>Selection은 document의 event handler로 등록되는 곳에만 사용되기 때문에 기본적으로 버려진다.</li>
  <li>event가 이미 document까지 delegated되었기 때문에 <code>event.stopPropagation()</code>을 사용하는 것은 도움이 되지 않는다.</li>
  <li>모든 event과 selector정보가 document에 등록되어 있기 때문에 event가 일어나게 되면 jQuery는 어떤 event handler가 호출되었는지 확인하기 위해 <code>matchesSelector</code>를 이용하여 거대한 metadata 저장소를 뒤진다.</li>
  <li>Event가 항상 document까지 전달되기 때문에, DOM이 sleep된 경우, 성능 문제가 있을 수 있다.</li>
</ul>

<h3 id="delegate">Delegate</h3>
<p><code>.live()</code>와 기능은 비슷하지만 document대신 등록할 element를 지정할 수 있다.</p>

<h4 id="section-4">장점</h4>
<ul>
  <li><strong>selector와 event정보를 어디에 등록할지 정할 수 있는 option이 존재</strong>한다.</li>
  <li>selection이 바로 실행되지 않고 root element에 등록되어 사용되어 진다.</li>
  <li>Chaining을 정상적으로 지원한다.</li>
  <li>jQuery가 여전히 일치하는 selector와 event정보를 찾아다녀야 하지만 root element를 지정하기 때문에 그 범위는 줄어들 수 있다.</li>
  <li>selector에 일치하는 DOM이 동적으로 생성되어도 정상적으로 동작한다.</li>
  <li>document ready event전에 event handler를 등록할 수 있다.</li>
</ul>

<h4 id="section-5">단점</h4>
<ul>
  <li><code>.bind()</code>에서 <code>.delegate()</code>로의 변경을 바로 할 수 없다.</li>
  <li><code>.live()</code>를 사용하는 것보다는 괜찮지만 <code>matchesSelector</code>를 사용하는 해서 검색을 하는 것에 대한 고려가 여전히 필요하다.</li>
</ul>

<h3 id="on">On</h3>
<p>jQuery 이 후부터는 <code>.bind()</code>, <code>.live()</code>, <code>.delegate()</code>가 내부적으로 <code>.on()</code>을 호출한다.</p>

<h4 id="section-6">장점</h4>
<ul>
  <li>다양한 event binding에 대해서 통일성을 제공한다.</li>
  <li>jQeury code를 단순화시키고 method 호출의 단계를 줄일 수 있다. ( 다른 mehod가 <code>.on()</code>을 호출하기 때문에 )</li>
  <li><code>.delegate()</code>의 장점으로 제공하고, 필요하다면 <code>.bind()</code> 기능도 제공한다.</li>
</ul>

<h4 id="section-7">단점</h4>
<ul>
  <li><code>.on()</code>을 어떻게 사용하느냐에 따라 행동이 변경 때문에 혼란을 야기할 수 있다.</li>
</ul>

<h3 id="section-8">결론</h3>
<ul>
  <li><code>.bind()</code>는 너무 비효율적이다.</li>
  <li><code>.live()</code>는 jQuery 1.7 이상에서 <strong>폐기</strong>되었기도 하지만 <strong>많은 문제</strong>를 가지고 있으니 사용하지 마라.</li>
  <li><code>.delegate()</code>는 성능이나 동적으로 생성되는 element와 같은 문제를 한방에 해결해준다.</li>
  <li><code>.on()</code>은 어떻게 사용하는냐에 따라 <code>.bind()</code>, <code>.live()</code>, <code>.delegate()</code>의 역할을 모두 할 수 있기 때문에 <strong>사용의 편리함</strong>을 가져다 준다.</li>
  <li><strong>jQuery 1.7 이상의 project에서는 <code>.on()</code>을 사용하자</strong></li>
</ul>

<p>결국 우리 Project는 사용해서는 안 될 메소드만 불러대고 있었던 것이었다. 허허허.</p>

<p>무언가 구글 번역에서 돌린 듯한 문장을 발견한다면 그건 <del>당신의 착각</del> 내가 이해를 못해서 그냥 직역해 놓은 것.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[IE9에서 Table의 한 Row에서 특정 Cell의 Offset이 달라지는 현상]]></title>
		<link href="/2013/04/30/changing-offset-of-a-cell-on-ie9"/>
		<updated>2013-04-30T00:00:00+09:00</updated>
		<id>/2013/04/30/changing-offset-of-a-cell-on-ie9</id>
		<content type="html"><![CDATA[<p>조건 : 브라우저 모드 - IE9, 문서 모드 - IE9</p>

<p>이 경우 html을 이용해서 table을 그리면 희한하게 특정 row의 특정 cell부터 offset이 달라지는 현상이 있었다.
더 환장하게 만드는 거는 다른 User로 Login을 하면 정상적으로 보인다는 것.
Data의 Property 값을 변경하면 또 정상적으로 보이기도 하고.
머 이런 경우가 있나 싶어서 Googling~</p>

<p><a href="http://stackoverflow.com/questions/7267014/ie9-table-has-random-rows-which-are-offset-at-random-columns">IE9 table has random rows which are offset at random columns</a></p>

<p>내가 발견한 현상이 Link Page의 Sample과 정확하게 같았다. 유레카.
원인은 IE9에서 writespace에 대한 parsing을 정상적으로 하지 못한 다는 것.
그래서 적용한 방법이 링크의 댓글들 중 jquery plug-in으로 되어 있는 녀석.</p>

<p><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><code class="javascript"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</code></pre></div></td><td class="code"><div class="highlight"><pre><span class="nx">jQuery</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">htmlClean</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">contents</span><span class="p">().</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">htmlClean</span><span class="p">();</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="k">return</span> <span class="o">!</span><span class="sr">/\S/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}).</span><span class="nx">remove</span><span class="p">();</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table></p>

<p>Web Browser에 따라서 고려해야할 부분이 산더미 같은데 IE Version별로도 고려해야할 게 산더미다.</p>

<p><strong>Updated</strong></p>

<p>위 방법은 모든 Contents를 뒤져야하는 관계로 Performance에 Issue가 발생할 가능성이 있다.
해서 결국은 partial view html의 whitespace를 직접 제거해서 사용하는 방향으로 수정되었다.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[GIT 발표자료]]></title>
		<link href="/2013/01/31/git-presentations"/>
		<updated>2013-01-31T00:00:00+09:00</updated>
		<id>/2013/01/31/git-presentations</id>
		<content type="html"><![CDATA[<p>TFS 대신에 GIT을 사용할랑 말랑하고 있는 관계로 우리팀 나름대로 GIT에 대한 준비를 내가 하게 되었다.
마지막 자료는 발표하지 못했기에 아까워서 포스팅이라도.</p>

<ul>
  <li>
    <p>모든 내용은 <a href="http://git-scm.com/documentation">Git Documentation</a>을 기반으로 작성. 한글은 <a href="http://dogfeet.github.io/articles/2012/progit.html">요기</a>! &lt;- 이 분 쫌 짱이신듯.</p>
  </li>
  <li>
    <p>개념적으로는 GIT이 TFS보다는 훨씬 괜찮은듯.
특히 우리 같은 경우 다른 개발 팀들과 시차가 많이 나기 때문에 TFS가 죽어버리면 업무가 거의 마비. ㄷㄷㄷ;</p>
  </li>
  <li>
    <p>하지만 VS와의 Integration은 TFS를 따라올 수 없지.</p>
  </li>
  <li>
    <p>결론은 사용은 TFS가 익숙하고 편하지만 개발 환경에 맞는 적합한 프로세스를 선택하고 익숙해지기만 한다면 GIT도 꽤나 유용하게 사용할 수 있을 것으로 판단됨.
사용을 해봐야 비교도 되고 경험도 되기 때문에 사용해보면 좋겠다는 생각.</p>
  </li>
  <li>
    <p><strong>발표자료</strong></p>
    <ul>
      <li><a href="/assets/attachments/2013-01-31-git-presentations/01.git-getting-started.pptx">Getting Started</a>  </li>
      <li><a href="/assets/attachments/2013-01-31-git-presentations/02.git-basics.pptx">Git Basics</a>  </li>
      <li><a href="/assets/attachments/2013-01-31-git-presentations/03.git-branching.pptx">Git Branching</a>  </li>
    </ul>
  </li>
</ul>

<p>발표자료. 글로 쓰니 이상하게 보이는군.</p>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[Javascript 정리]]></title>
		<link href="/2012/11/08/javascript-guide"/>
		<updated>2012-11-08T00:00:00+09:00</updated>
		<id>/2012/11/08/javascript-guide</id>
		<content type="html"><![CDATA[<p>머 내가 장대한 글을 적으려는 건 아니고 github에서 괜찮은 포스팅(?)을 찾아서 링크를 걸려는 중.</p>

<p><a href="https://github.com/airbnb/javascript">Airbnb JavaScript Style Guide</a></p>

<ul>
  <li>GIT/GIRA를 공부하게 생겼다.</li>
  <li>javascript/jquery 이렇게 Category를 하나로 가지고 갈고 했는데 글자수 제한으로 실패.</li>
  <li>그나저나 이 블로그 다른 동네로 이사해야 하는데 Posting은 점점 많아지고 있다. 큰일이다.</li>
  <li><strong>[Updated]</strong> 2013.08.07에 Github로 이사하는 중이다.ㅎㅎ</li>
</ul>

]]></content>
	</entry>
	
	<entry>
		<title type="html"><![CDATA[Disable text selection for SVG]]></title>
		<link href="/2012/10/18/disable-text-selection-for-svg"/>
		<updated>2012-10-18T00:00:00+09:00</updated>
		<id>/2012/10/18/disable-text-selection-for-svg</id>
		<content type="html"><![CDATA[<p>문득 SVG파일에다가 WaterMark를 동적으로 넣어햐 하게 되었다.
간단하게 Status에 따른 WaterMark를 넣어야 하는데 어떻게 저떻게 구글링을 해서 Water Mark넣는 데는 성공!</p>

<p>근데 Water Mark가 SVG의 text element로 되어 있으니 워터마크에 마우스를 갖다대니 Text Selection 기능이 활성화 되는 것이 아닌가!
워터마크란 본디 뒤에서 흐릿하게 존재해야 하는 놈이거늘…!
그래서 찾아보니 <a href="http://www.w3.org/TR/SVG/text.html#TextSelection">SVG에서 text는 기본적으로 Selection이 가능</a>하도록 되어 있다고 한다.</p>

<p>그것을 Disable 하는 기능을 Googling하니 잘 안나오더라.
그러다가 찾은 단서가 <a href="http://tech.groups.yahoo.com/group/svg-developers/message/42866">여기</a>!
댓글을 보면 <code>pointer-events=none</code>이라는 문구가 나오는 데 요놈을 사용하니까 된다아아아~.
<a href="http://www.w3.org/TR/SVG/interact.html#PointerEventsProperty">W3C의 문서</a>를 참조하면 더 자세한 내용을 알수가 있다.</p>

<p><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><code class="html">1</code></pre></div></td><td class="code"><div class="highlight"><pre><span class="ni">&amp;lt;</span>text pointer-events=none<span class="ni">&amp;gt;</span>AAA<span class="ni">&amp;lt;</span>/text<span class="ni">&amp;gt;</span>
</pre></div>
</td></tr></table></p>

<p>머 이런식.</p>

]]></content>
	</entry>
	
	
</feed>